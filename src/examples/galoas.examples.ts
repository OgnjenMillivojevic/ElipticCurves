

import { ExtendedField } from "../field/binary-field";


const poly = [
    {
        "power": 3,
        "coeff": "0x01"
    },
    {
        "power": 2,
        "coeff": "0x01"
    },
    {
        "power": 0,
        "coeff": "0x01"
    }
]



const poly8 = [
    {
        "power": 8,
        "coeff": "0x01"
    },
    {
        "power": 7,
        "coeff": "0x01"
    },
    {
        "power": 6,
        "coeff": "0x01"
    },
    {
        "power": 5,
        "coeff": "0x01"
    },
    {
        "power": 4,
        "coeff": "0x01"
    },
    {
        "power": 2,
        "coeff": "0x01"
    },
    {
        "power": 0,
        "coeff": "0x01"
    }
]

function parsePolly(pol: string){
    let res = '';
    for(let i =pol.length - 1; i >= 0; i--){
        if(pol[i] != '0' && i != 0){
            res = res + 'x^' + i + ' + ' 
        }
        else if(pol[i] != '0' && i == 0){
            res = res + '1'
        }
    }
    return res;
}
let field: ExtendedField = new ExtendedField(poly);

// console.log('Galoas field G(256) generated by x^8 + x^7 + x^6 + x^5 + x^4 + x^2 + 1');

// console.log('Example of Addition: ')
// console.log(' (x^6 + x^5 + x^4 + x^2) + (x^4 + x^2 + 1) = ' + parsePolly(field.add(114n, 7n).toString(2)) );

// console.log('Example of Multiplication: ')
// console.log(' (x^6 + x^5 + x^4 + x^2) * (x^4 + x^2 + 1) = ' + parsePolly(field.multiply(114n, 7n).toString(2)));
console.log(field.invers(7n))
// console.log(field.multiply(7n, 117649n))